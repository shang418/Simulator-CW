package MapClass;

import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Random;

public class Map {
	// fix the width and length of the map 
	final int width=480; 
	final int length=680; 
	final int MAX_NUM_OBSTACLES=10; 
	final int MIN_NUM_OBSTACLES=0;
	final Point2D startpoint; 
	final Point2D goalpoint;
	ArrayList<Obstacle> list_obstacles; 
	/*
	 * <p> the number of obstacles located on the map
	 */
	int num; 
	public Map(int num_obs){
			this.num=validateIntegers(num_obs, MIN_NUM_OBSTACLES,MAX_NUM_OBSTACLES);
			generateObstacles();
	}
	public int validateIntegers(int n, int min, int max){
				if(n<min){
					System.out.println("Numebr is less than minimun, Number automatically reset to "+min);
				return min;	
				}
				else if (n>max){
					System.out.println("Number is greater than maxmimum, Number automatically reset to "+max);
					return max;	
				}
		return n; 
		}
	public void generateObstacles(){
		// leave capability for different types of obstacles
		Random rand=new Random();
		for(int i=0; i<num; i++){
			int x=this.validateIntegers(rand.nextInt(width +1), 0, width);
			int y =this.validateIntegers(rand.nextInt(length +1),0,length);
			int w=this.validateIntegers((rand.nextInt(Obstacle.MAXSIZE-Obstacle.MINSIZE +1) + Obstacle.MINSIZE), Obstacle.MINSIZE, Obstacle.MAXSIZE);
			int l=this.validateIntegers((rand.nextInt(Obstacle.MAXSIZE-Obstacle.MINSIZE +1) + Obstacle.MINSIZE), Obstacle.MINSIZE, Obstacle.MAXSIZE);
			// if obstacle is always a rectangle, then only provide width and length;
			Obstacle newObs=new Obstacle(x,y,w,l);
			newObs=isValidObject(newObs);
			this.list_obstacles.add(newObs);
		}
	}
	/*
	 * Method that checks to see if: 
	 * 1. Obstacles don't intersect each other
	 * 2. is not drawn outside the borders of the map
	 */
	public Obstacle isValidObject(Obstacle newObs){
		//  
		return newObs; 
	}
	/*
	 * Method that loads the map to gui screen
	 */
	public boolean loadMap(){
		
	}	
}
